<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GuardRail.Core</name>
    </assembly>
    <members>
        <member name="T:GuardRail.Core.AccessAuthorizationEvent">
            <summary>
            The data defining the access authorization event
            </summary>
        </member>
        <member name="M:GuardRail.Core.AccessAuthorizationEvent.Create(GuardRail.Core.DataModels.Device,GuardRail.Core.IAccessControlDevice)">
            <summary>
            Creates a new AccessAuthorizationEvent.
            </summary>
            <param name="device">The device that triggered the request.</param>
            <param name="accessControlDevice">The access point the request was triggered at.</param>
            <returns></returns>
        </member>
        <member name="P:GuardRail.Core.AccessAuthorizationEvent.Device">
            <summary>
            The device that triggered the request.
            </summary>
        </member>
        <member name="P:GuardRail.Core.AccessAuthorizationEvent.AccessControlDevice">
            <summary>
            The access point the request was triggered at.
            </summary>
        </member>
        <member name="T:GuardRail.Core.CommandLine.CommandLineArgument">
            <summary>
            A single command line argument.
            </summary>
        </member>
        <member name="P:GuardRail.Core.CommandLine.CommandLineArgument.Type">
            <summary>
            The type of the argument.
            </summary>
        </member>
        <member name="P:GuardRail.Core.CommandLine.CommandLineArgument.Value">
            <summary>
            The value of the argument as a string.
            </summary>
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArgument.Parse(System.String)">
            <summary>
            Parses a CommandLineArgument from a string
            </summary>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArgument.ToString">
            <inheritdoc />
        </member>
        <member name="T:GuardRail.Core.CommandLine.CommandLineArguments">
            <summary>
            Command line arguments.
            </summary>
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.Create(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a CommandLineArguments from the strings passed in.
            </summary>
            <param name="args">The arguments to parse.</param>
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.ContainsKey(GuardRail.Core.CommandLine.CommandLineArgumentType)">
            <summary>
            Checks to see if the CommandLineArgumentType was defined.
            </summary>
            <param name="commandLineArgumentType">The type to check for.</param>
            <returns>bool</returns>
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.TryGetByKey(GuardRail.Core.CommandLine.CommandLineArgumentType)">
            <summary>
            Tries to get the CommandLineArgumentType for the type passed in.
            Returns null if no value is found.
            </summary>
            <param name="commandLineArgumentType">The type to check for.</param>
            <returns>CommandLineArgument</returns>
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.Add(GuardRail.Core.CommandLine.CommandLineArgument)">
            <inheritdoc />
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.Clear">
            <inheritdoc />
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.Contains(GuardRail.Core.CommandLine.CommandLineArgument)">
            <inheritdoc />
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.CopyTo(GuardRail.Core.CommandLine.CommandLineArgument[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.Remove(GuardRail.Core.CommandLine.CommandLineArgument)">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.CommandLine.CommandLineArguments.Count">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.CommandLine.CommandLineArguments.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.IndexOf(GuardRail.Core.CommandLine.CommandLineArgument)">
            <inheritdoc />
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.Insert(System.Int32,GuardRail.Core.CommandLine.CommandLineArgument)">
            <inheritdoc />
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.CommandLine.CommandLineArguments.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GuardRail.Core.CommandLine.CommandLineArguments.ToString">
            <inheritdoc />
        </member>
        <member name="T:GuardRail.Core.CommandLine.CommandLineArgumentType">
            <summary>
            All valid command line arguments.
            </summary>
        </member>
        <member name="F:GuardRail.Core.CommandLine.CommandLineArgumentType.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:GuardRail.Core.CommandLine.CommandLineArgumentType.FreshInstall">
            <summary>
            Denotes that a fresh install should be done.
            </summary>
        </member>
        <member name="F:GuardRail.Core.CommandLine.CommandLineArgumentType.Update">
            <summary>
            Denotes that an update should be done.
            </summary>
        </member>
        <member name="F:GuardRail.Core.CommandLine.CommandLineArgumentType.ShouldShowSetup">
            <summary>
            Denotes that the main application should show the setup screen.
            </summary>
        </member>
        <member name="T:GuardRail.Core.CommandLine.InvalidCommandLineArgumentException">
            <summary>
            The exception happens when a command line argument is not in the defined list of arguments.
            </summary>
        </member>
        <member name="P:GuardRail.Core.CommandLine.InvalidCommandLineArgumentException.InvalidArgument">
            <summary>
            The invalid argument that was passed in.
            </summary>
        </member>
        <member name="M:GuardRail.Core.CommandLine.InvalidCommandLineArgumentException.#ctor(System.String)">
            <summary>
            The exception happens when a command line argument is not in the defined list of arguments.
            </summary>
            <param name="invalidArgument"></param>
        </member>
        <member name="T:GuardRail.Core.CommandLine.InvalidCommandLineArgumentFormatException">
            <summary>
            The exception happens when a command line argument is not well formatted.
            </summary>
        </member>
        <member name="P:GuardRail.Core.CommandLine.InvalidCommandLineArgumentFormatException.InvalidArgument">
            <summary>
            The invalid argument that was passed in.
            </summary>
        </member>
        <member name="M:GuardRail.Core.CommandLine.InvalidCommandLineArgumentFormatException.#ctor(System.String)">
            <summary>
            The exception happens when a command line argument is not well formatted.
            </summary>
            <param name="invalidArgument"></param>
        </member>
        <member name="T:GuardRail.Core.DataModels.AccessPoint">
            <summary>
            Represents an access control device.
            This could be a keypad, NFC reader, etc.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.AccessPoint.Guid">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.DataModels.AccessPoint.DeviceId">
            <summary>
            The device's ID.
            </summary>
        </member>
        <member name="T:GuardRail.Core.DataModels.AccessPointGroup">
            <summary>
            A group of doors in the system.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.AccessPointGroup.Guid">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.DataModels.AccessPointGroup.Name">
            <summary>
            The name of the group.
            </summary>
        </member>
        <member name="T:GuardRail.Core.DataModels.Account">
            <summary>
            An account in the system.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Account.Guid">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.DataModels.Account.Name">
            <summary>
            The name of the account.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Account.Location">
            <summary>
            The location of the installation.
            </summary>
        </member>
        <member name="T:GuardRail.Core.DataModels.Device">
            <summary>
            A device like a phone, NFC tag, etc.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Device.Guid">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.DataModels.Device.DeviceId">
            <summary>
            The ID of the device.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Device.FriendlyName">
            <summary>
            A friendly name for the device.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Device.ByteId">
            <summary>
            The bytes used to identify a device.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Device.IsConfigured">
            <summary>
            Whether or not the device has been configured.
            </summary>
        </member>
        <member name="T:GuardRail.Core.DataModels.Door">
            <summary>
            Represents a door locking device.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Door.Guid">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.DataModels.Door.DeviceId">
            <summary>
            The ID of the door.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Door.FriendlyName">
            <summary>
            A friendlyName for the door.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Door.DoorStateRequestType">
            <summary>
            The locked status of the door.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.Door.IsConfigured">
            <summary>
            Whether or not the door is fully configured.
            </summary>
        </member>
        <member name="T:GuardRail.Core.DataModels.IAddableItem">
            <summary>
            An item that can be added.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.IAddableItem.Guid">
            <summary>
            The global ID for the item.
            Guid is to be used in all systems for the global ID.
            This value is set automatically and should not be passed in for adds.
            </summary>
        </member>
        <member name="T:GuardRail.Core.DataModels.NdsPing">
            <summary>
            A ping request/response.
            </summary>
            <remarks>
            A client will send this data and the server will send it back to show it received it.
            </remarks>
        </member>
        <member name="P:GuardRail.Core.DataModels.NdsPing.RequestId">
            <summary>
            The ID of the request.
            </summary>
        </member>
        <member name="T:GuardRail.Core.DataModels.UnLockRequest">
            <summary>
            A request to unlock a door.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.UnLockRequest.DoorId">
            <summary>
            The ID of the door.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.UnLockRequest.UnlockRequestType">
            <summary>
            The method used to attempt to access the door.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.UnLockRequest.Data">
            <summary>
            The data used.
            </summary>
            <remarks>
            The type of data and how to handle it will be determined by the value of <see cref="P:GuardRail.Core.DataModels.UnLockRequest.UnlockRequestType"/>.
            </remarks>
        </member>
        <member name="T:GuardRail.Core.DataModels.User">
            <summary>
            A user in the system.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.User.Guid">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.DataModels.User.Username">
            <summary>
            The user's first name.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.User.Password">
            <summary>
            The user's last name.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.User.FirstName">
            <summary>
            The user's first name.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.User.LastName">
            <summary>
            The user's last name.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.User.Phone">
            <summary>
            The user's phone.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.User.Email">
            <summary>
            The user's email.
            </summary>
        </member>
        <member name="T:GuardRail.Core.DataModels.UserGroup">
            <summary>
            A group of users in the system.
            </summary>
        </member>
        <member name="P:GuardRail.Core.DataModels.UserGroup.Guid">
            <inheritdoc />
        </member>
        <member name="P:GuardRail.Core.DataModels.UserGroup.Name">
            <summary>
            The name of the group.
            </summary>
        </member>
        <member name="T:GuardRail.Core.Enums.DoorStateRequestType">
            <summary>
            The states for a door.
            </summary>
        </member>
        <member name="F:GuardRail.Core.Enums.DoorStateRequestType.UnKnown">
            <summary>
            The locked status of the door cannot be determined.
            </summary>
        </member>
        <member name="F:GuardRail.Core.Enums.DoorStateRequestType.UnLocked">
            <summary>
            The door is unlocked.
            </summary>
        </member>
        <member name="F:GuardRail.Core.Enums.DoorStateRequestType.Locked">
            <summary>
            The door is locked.
            </summary>
        </member>
        <member name="F:GuardRail.Core.Enums.DoorStateRequestType.Open">
            <summary>
            The door is open.
            </summary>
        </member>
        <member name="F:GuardRail.Core.Enums.DoorStateRequestType.Closed">
            <summary>
            The door is closed.
            </summary>
        </member>
        <member name="F:GuardRail.Core.Enums.DoorStateRequestType.GreenLightOn">
            <summary>
            The green light is on.
            </summary>
        </member>
        <member name="F:GuardRail.Core.Enums.DoorStateRequestType.RedLightOn">
            <summary>
            The red light is on.
            </summary>
        </member>
        <member name="F:GuardRail.Core.Enums.DoorStateRequestType.BuzzerOn">
            <summary>
            The buzzer is on.
            </summary>
        </member>
        <member name="T:GuardRail.Core.Enums.UnlockRequestType">
            <summary>
            Ways an unlock can be triggered.
            </summary>
        </member>
        <member name="T:GuardRail.Core.EventModels.DoorCommand">
            <summary>
            A command to a door.
            </summary>
            <param name="DoorId">The ID of the door.</param>
            <param name="DoorStateRequests">All requested state changes.</param>
            <param name="Message">A message related to the command.</param>
        </member>
        <member name="M:GuardRail.Core.EventModels.DoorCommand.#ctor(System.Guid,System.Collections.Generic.IReadOnlyCollection{GuardRail.Core.EventModels.DoorStateRequest},System.String)">
            <summary>
            A command to a door.
            </summary>
            <param name="DoorId">The ID of the door.</param>
            <param name="DoorStateRequests">All requested state changes.</param>
            <param name="Message">A message related to the command.</param>
        </member>
        <member name="P:GuardRail.Core.EventModels.DoorCommand.DoorId">
            <summary>The ID of the door.</summary>
        </member>
        <member name="P:GuardRail.Core.EventModels.DoorCommand.DoorStateRequests">
            <summary>All requested state changes.</summary>
        </member>
        <member name="P:GuardRail.Core.EventModels.DoorCommand.Message">
            <summary>A message related to the command.</summary>
        </member>
        <member name="T:GuardRail.Core.EventModels.DoorStateRequest">
            <summary>
            A request item for state change on a door.
            </summary>
            <param name="DoorStateRequestType">The type of state change.</param>
            <param name="Duration">How long to hold the door status.</param>
        </member>
        <member name="M:GuardRail.Core.EventModels.DoorStateRequest.#ctor(GuardRail.Core.Enums.DoorStateRequestType,System.TimeSpan)">
            <summary>
            A request item for state change on a door.
            </summary>
            <param name="DoorStateRequestType">The type of state change.</param>
            <param name="Duration">How long to hold the door status.</param>
        </member>
        <member name="P:GuardRail.Core.EventModels.DoorStateRequest.DoorStateRequestType">
            <summary>The type of state change.</summary>
        </member>
        <member name="P:GuardRail.Core.EventModels.DoorStateRequest.Duration">
            <summary>How long to hold the door status.</summary>
        </member>
        <member name="T:GuardRail.Core.Helpers.Extensions">
            <summary>
            Extensions!
            </summary>
        </member>
        <member name="M:GuardRail.Core.Helpers.Extensions.ToJson``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Outputs the object as a JSON string.
            </summary>
            <typeparam name="T">The type of the item to serialize.</typeparam>
            <param name="item">The item to serialize.</param>
            <param name="jsonSerializerSettings">Defaulted to only ignores nulls.</param>
            <returns>string</returns>
        </member>
        <member name="M:GuardRail.Core.Helpers.Extensions.FromJson``1(System.String)">
            <summary>
            Deserialize JSON to type.
            </summary>
            <typeparam name="T">The type of the item to deserialize.</typeparam>
            <param name="s">The JSON string.</param>
            <returns>T</returns>
        </member>
        <member name="M:GuardRail.Core.Helpers.Extensions.FromJson``1(System.IO.Stream)">
            <summary>
            Deserialize JSON to type.
            </summary>
            <typeparam name="T">The type of the item to deserialize.</typeparam>
            <param name="s">The JSON string.</param>
            <returns>T</returns>
        </member>
        <member name="M:GuardRail.Core.Helpers.Extensions.Convert``1(System.String)">
            <summary>
            Converts one type to another type.
            </summary>
            <typeparam name="TOut">The type to return.</typeparam>
            <param name="from">The value to convert.</param>
            <returns>TOut</returns>
        </member>
        <member name="M:GuardRail.Core.Helpers.Extensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Extension for IsNullOrWhiteSpace.
            </summary>
            <param name="str">The value to use</param>
            <returns>bool</returns>
        </member>
        <member name="M:GuardRail.Core.Helpers.Extensions.LogGuardRailError``2(Microsoft.Extensions.Logging.ILogger{``0},``1,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an exception with meta-data.
            </summary>
            <param name="logger">The logger to write the exception to.</param>
            <param name="exception">The exception to log.</param>
            <param name="additionalMessage">Any additional information to log, the exception's message is automatically logged.</param>
            <param name="memberName">DO NOT USE: Auto-populated by <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
            <param name="sourceFilePath">DO NOT USE: Auto-populated by <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/>.</param>
            <param name="sourceLineNumber">DO NOT USE: Auto-populated by <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/>.</param>
            <typeparam name="TLoggerType">The logger type.</typeparam>
            <typeparam name="TException">The exception type.</typeparam>
        </member>
        <member name="M:GuardRail.Core.Helpers.Extensions.LogGuardRailInformation``1(Microsoft.Extensions.Logging.ILogger{``0},System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an informational message with meta-data.
            </summary>
            <param name="logger">The logger to write the informational log to.</param>
            <param name="message">The message to log.</param>
            <param name="memberName">DO NOT USE: Auto-populated by <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
            <param name="sourceFilePath">DO NOT USE: Auto-populated by <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/>.</param>
            <param name="sourceLineNumber">DO NOT USE: Auto-populated by <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/>.</param>
            <typeparam name="TLoggerType">The logger type.</typeparam>
        </member>
        <member name="T:GuardRail.Core.Helpers.GuardRailBackgroundWorker">
            <summary>
            A background worker for GuardRail.
            </summary>
        </member>
        <member name="P:GuardRail.Core.Helpers.GuardRailBackgroundWorker.GlobalStop">
            <summary>
            Prevents all workers from doing their work.
            Workers are still active and will resume as soon as the global stop is lifted.
            </summary>
        </member>
        <member name="P:GuardRail.Core.Helpers.GuardRailBackgroundWorker.Name">
            <summary>
            The name of the worker.
            </summary>
        </member>
        <member name="M:GuardRail.Core.Helpers.GuardRailBackgroundWorker.Create(System.String,System.TimeSpan,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Creates a worker task.
            </summary>
            <param name="name">The name of the timer.</param>
            <param name="delay">How long between executions to wait.</param>
            <param name="work">The work to be done.</param>
            <param name="cancellationToken">A CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:GuardRail.Core.Helpers.GuardRailBackgroundWorker.Start">
            <summary>
            Start the worker.
            </summary>
        </member>
        <member name="M:GuardRail.Core.Helpers.GuardRailBackgroundWorker.Stop">
            <summary>
            Stops the worker.
            </summary>
        </member>
        <member name="M:GuardRail.Core.Helpers.GuardRailBackgroundWorker.Dispose">
            <inheritdoc />
        </member>
        <member name="T:GuardRail.Core.Helpers.VersionConverter">
            <inheritdoc/>
        </member>
        <member name="M:GuardRail.Core.Helpers.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:GuardRail.Core.Helpers.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:GuardRail.Core.Helpers.VersionConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:GuardRail.Core.IAccessControlDevice">
            <summary>
            Represents an access control device.
            This could be a keypad, NFC reader, etc.
            </summary>
        </member>
        <member name="M:GuardRail.Core.IAccessControlDevice.Init">
            <summary>
            Starts up any processes needed to monitor the device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuardRail.Core.IAccessControlDevice.GetDeviceId">
            <summary>
            Gets an ID for the device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuardRail.Core.IAccessControlDevice.PresentNoAccessGranted(System.String)">
            <summary>
            Present to the user access was not granted.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:GuardRail.Core.InstallConfiguration">
            <summary>
            The configuration for an update/install.
            </summary>
            <param name="LatestVersion">The latest version of the software.</param>
            <param name="InstallFiles">The files for the upload.</param>
            <param name="RestartCommand">The command to run that will do any last cleanups and start the updated application.</param>
            <param name="UpdateDirectory">The directory that the updates are to be stored in.</param>
        </member>
        <member name="M:GuardRail.Core.InstallConfiguration.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{GuardRail.Core.InstallFile},System.String,System.String)">
            <summary>
            The configuration for an update/install.
            </summary>
            <param name="LatestVersion">The latest version of the software.</param>
            <param name="InstallFiles">The files for the upload.</param>
            <param name="RestartCommand">The command to run that will do any last cleanups and start the updated application.</param>
            <param name="UpdateDirectory">The directory that the updates are to be stored in.</param>
        </member>
        <member name="P:GuardRail.Core.InstallConfiguration.LatestVersion">
            <summary>The latest version of the software.</summary>
        </member>
        <member name="P:GuardRail.Core.InstallConfiguration.InstallFiles">
            <summary>The files for the upload.</summary>
        </member>
        <member name="P:GuardRail.Core.InstallConfiguration.RestartCommand">
            <summary>The command to run that will do any last cleanups and start the updated application.</summary>
        </member>
        <member name="P:GuardRail.Core.InstallConfiguration.UpdateDirectory">
            <summary>The directory that the updates are to be stored in.</summary>
        </member>
        <member name="T:GuardRail.Core.InstallFile">
            <summary>
            Represents a file to be downloaded for the install.
            </summary>
            <param name="DownloadUri">The Location of the file on the web.</param>
            <param name="LocalPath">Where the file goes locally.</param>
        </member>
        <member name="M:GuardRail.Core.InstallFile.#ctor(System.Uri,System.String)">
            <summary>
            Represents a file to be downloaded for the install.
            </summary>
            <param name="DownloadUri">The Location of the file on the web.</param>
            <param name="LocalPath">Where the file goes locally.</param>
        </member>
        <member name="P:GuardRail.Core.InstallFile.DownloadUri">
            <summary>The Location of the file on the web.</summary>
        </member>
        <member name="P:GuardRail.Core.InstallFile.LocalPath">
            <summary>Where the file goes locally.</summary>
        </member>
        <member name="T:GuardRail.Core.Validator">
            <summary>
            Validation extensions.
            </summary>
        </member>
        <member name="M:GuardRail.Core.Validator.IsValidPhoneFormat(System.String)">
            <summary>
            Validates that the string is formatted as a valid phone number.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>bool</returns>
        </member>
        <member name="M:GuardRail.Core.Validator.IsValidEmailFormat(System.String)">
            <summary>
            Validates that the string is formatted as a valid email.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>bool</returns>
        </member>
    </members>
</doc>
