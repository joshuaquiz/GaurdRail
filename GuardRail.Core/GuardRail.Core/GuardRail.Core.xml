<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GuardRail.Core</name>
    </assembly>
    <members>
        <member name="T:GuardRail.Core.AccessAuthorizationEvent">
            <summary>
            The data defining the access authorization event
            </summary>
        </member>
        <member name="M:GuardRail.Core.AccessAuthorizationEvent.Create(GuardRail.Core.IDevice,GuardRail.Core.IAccessControlDevice)">
            <summary>
            Creates a new AccessAuthorizationEvent.
            </summary>
            <param name="device">The device that triggered the request.</param>
            <param name="accessControlDevice">The access point the request was triggered at.</param>
            <returns></returns>
        </member>
        <member name="P:GuardRail.Core.AccessAuthorizationEvent.Device">
            <summary>
            The device that triggered the request.
            </summary>
        </member>
        <member name="P:GuardRail.Core.AccessAuthorizationEvent.AccessControlDevice">
            <summary>
            The access point the request was triggered at.
            </summary>
        </member>
        <member name="T:GuardRail.Core.IAccessControlDevice">
            <summary>
            Represents an access control device.
            This could be a keypad, NFC reader, etc.
            </summary>
        </member>
        <member name="M:GuardRail.Core.IAccessControlDevice.Init">
            <summary>
            Starts up any processes needed to monitor the device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuardRail.Core.IAccessControlDevice.GetDeviceId">
            <summary>
            Gets an ID for the device.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuardRail.Core.IAccessControlFactory">
            <summary>
            Used to generate a list of <see cref="T:GuardRail.Core.IAccessControlDevice"/>.
            </summary>
        </member>
        <member name="M:GuardRail.Core.IAccessControlFactory.GetAccessControlDevices">
            <summary>
            Gets a list of <see cref="T:GuardRail.Core.IAccessControlDevice"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuardRail.Core.IAuthorizer">
            <summary>
            Determines if the device is valid at the location.
            </summary>
        </member>
        <member name="M:GuardRail.Core.IAuthorizer.IsDeviceAuthorizedAtLocation(GuardRail.Core.IDevice,GuardRail.Core.IAccessControlDevice)">
            <summary>
            Determines if the device is valid at the location.
            </summary>
            <param name="device"></param>
            <param name="accessControlDevice"></param>
            <returns></returns>
        </member>
        <member name="T:GuardRail.Core.IDevice">
            <summary>
            A device like a phone, NFC tag, etc.
            </summary>
        </member>
        <member name="P:GuardRail.Core.IDevice.Id">
            <summary>
            The ID of the device.
            </summary>
        </member>
        <member name="T:GuardRail.Core.IDoor">
            <summary>
            Represents a door locking device.
            </summary>
        </member>
        <member name="M:GuardRail.Core.IDoor.GetLockedStatus(System.Threading.CancellationToken)">
            <summary>
            Gets the current locked status for the door.
            </summary>
            <param name="cancellationToken"></param>
            <returns><see cref="T:GuardRail.Core.LockedStatus"/></returns>
        </member>
        <member name="M:GuardRail.Core.IDoor.Lock(System.Threading.CancellationToken)">
            <summary>
            Sets the door in a locked state.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:GuardRail.Core.IDoor.UnLock(System.Threading.CancellationToken)">
            <summary>
            Sets the door into an un-locked state.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:GuardRail.Core.IDoorFactory">
            <summary>
            Used to generate a list of <see cref="T:GuardRail.Core.IDoor"/>.
            </summary>
        </member>
        <member name="M:GuardRail.Core.IDoorFactory.GetDoors">
            <summary>
            Gets a list of <see cref="T:GuardRail.Core.IAccessControlDevice"/>.
            </summary>
            <returns><see cref="T:GuardRail.Core.IAccessControlDevice"/></returns>
        </member>
        <member name="T:GuardRail.Core.IEventBus">
            <summary>
            Event handling.
            </summary>
        </member>
        <member name="P:GuardRail.Core.IEventBus.AccessAuthorizationEvents">
            <summary>
            The events.
            </summary>
        </member>
        <member name="T:GuardRail.Core.IUser">
            <summary>
            A user in the system.
            </summary>
        </member>
        <member name="P:GuardRail.Core.IUser.Id">
            <summary>
            The ID of the user.
            </summary>
        </member>
        <member name="T:GuardRail.Core.LockedStatus">
            <summary>
            The locked states for a door.
            </summary>
        </member>
        <member name="F:GuardRail.Core.LockedStatus.UnKnown">
            <summary>
            The locked status of the door cannot be determined.
            </summary>
        </member>
        <member name="F:GuardRail.Core.LockedStatus.UnLocked">
            <summary>
            The door is unlocked.
            </summary>
        </member>
        <member name="F:GuardRail.Core.LockedStatus.Locked">
            <summary>
            The door is locked.
            </summary>
        </member>
    </members>
</doc>
