<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GuardRail</name>
    </assembly>
    <members>
        <member name="T:GuardRail.AccessControlDevices.ACR1252U.Acr1252PiccDevice">
            <summary>
            ACR1252U PICC access control device.
            </summary>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252PiccDevice.Finalize">
            <summary>
            Destructor for Acr1252U.
            </summary>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252PiccDevice.Create(System.String,GuardRail.Core.IEventBus,PCSC.ISCardContext,Serilog.ILogger,GuardRail.Core.IDeviceProvider)">
            <summary>
            Creates a new Acr1252U.
            </summary>
            <param name="id">The ID of the reader.</param>
            <param name="eventBus">The event bus.</param>
            <param name="sCardContext">The context for connecting to the card reader.</param>
            <param name="logger">The logger, because.. well, logs :)</param>
            <param name="deviceProvider">The provider to look up devices by their ID.</param>
            <returns></returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252PiccDevice.Init">
            <summary>
            Starts the watcher process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252PiccDevice.GetCardId(PCSC.ISCardReader)">
            <summary>
            Gets the ID of the device.
            </summary>
            <param name="cardReader"></param>
            <returns>The ID of the device</returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252PiccDevice.ErrorCheck(PCSC.SCardError)">
            <summary>
            If the result is an error then throw it.
            </summary>
            <param name="status">The status of the command.</param>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252PiccDevice.GetDeviceId">
            <summary>
            Returns the ID if this reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252PiccDevice.PresentNoAccessGranted(System.String)">
            <summary>
            Let the user know the authentication request failed.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252PiccDevice.Dispose">
            <summary>
            Implementing <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="T:GuardRail.AccessControlDevices.ACR1252U.Acr1252SamDevice">
            <summary>
            ACR1252U SAM access control device.
            </summary>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252SamDevice.Finalize">
            <summary>
            Destructor for Acr1252U.
            </summary>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252SamDevice.Create(System.String,GuardRail.Core.IEventBus,PCSC.ISCardContext,Serilog.ILogger,GuardRail.Core.IDeviceProvider)">
            <summary>
            Creates a new Acr1252U.
            </summary>
            <param name="id">The ID of the reader.</param>
            <param name="eventBus">The event bus.</param>
            <param name="sCardContext">The context for connecting to the card reader.</param>
            <param name="logger">The logger, because.. well, logs :)</param>
            <param name="deviceProvider">The provider to look up devices by their ID.</param>
            <returns></returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252SamDevice.Init">
            <summary>
            Starts the watcher process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252SamDevice.GetCardId(PCSC.ISCardReader)">
            <summary>
            Gets the ID of the device.
            </summary>
            <param name="cardReader"></param>
            <returns>The ID of the device</returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252SamDevice.ErrorCheck(PCSC.SCardError)">
            <summary>
            If the result is an error then throw it.
            </summary>
            <param name="status">The status of the command.</param>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252SamDevice.GetDeviceId">
            <summary>
            Returns the ID if this reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252SamDevice.PresentNoAccessGranted(System.String)">
            <summary>
            Let the user know the authentication request failed.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252SamDevice.Dispose">
            <summary>
            Implementing <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="T:GuardRail.AccessControlDevices.ACR1252U.Acr1252UFactory">
            <summary>
            Factory for ACR1252U access control devices.
            </summary>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252UFactory.#ctor(GuardRail.Core.IEventBus,PCSC.ISCardContext,Serilog.ILogger,GuardRail.Core.IDeviceProvider)">
            <summary>
            Builds a Acr1252UFactory.
            </summary>
            <param name="eventBus"></param>
            <param name="sCardContext"></param>
            <param name="logger"></param>
            <param name="deviceProvider"></param>
        </member>
        <member name="M:GuardRail.AccessControlDevices.ACR1252U.Acr1252UFactory.GetAccessControlDevices">
            <summary>
            Get ACR1252U access control devices.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GuardRail.Authorizers.AlwaysAllowAuthorizer.AlwaysAllowAuthorizer">
            <summary>
            Everyone gets in all the time!
            </summary>
        </member>
        <member name="M:GuardRail.Authorizers.AlwaysAllowAuthorizer.AlwaysAllowAuthorizer.IsDeviceAuthorizedAtLocation(GuardRail.Core.IUser,GuardRail.Core.IAccessControlDevice)">
            <summary>
            Is device allowed? Yes!
            </summary>
            <param name="user"></param>
            <param name="accessControlDevice"></param>
            <returns></returns>
        </member>
        <member name="T:GuardRail.Data.GuardRailContext">
            <summary>
            Database context for the project.
            </summary>
        </member>
        <member name="M:GuardRail.Data.GuardRailContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:GuardRail.Data.User">
            <summary>
            A system user
            </summary>
        </member>
        <member name="P:GuardRail.Data.User.Id">
            <summary>
            The ID of the user.
            </summary>
        </member>
        <member name="M:GuardRail.Data.User.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:GuardRail.DeviceProviders.LoggerDeviceProvider">
            <summary>
            Logs events, that's it.
            </summary>
        </member>
        <member name="M:GuardRail.DeviceProviders.LoggerDeviceProvider.#ctor(Serilog.ILogger)">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:GuardRail.DeviceProviders.LoggerDeviceProvider.GetDeviceByByteId(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            Returns a logging device.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:GuardRail.Devices.ConsoleLoggerDevice">
            <summary>
            Logs stuff, that's it.
            </summary>
        </member>
        <member name="P:GuardRail.Devices.ConsoleLoggerDevice.Id">
            <summary>
            THe ID of the device.
            </summary>
        </member>
    </members>
</doc>
